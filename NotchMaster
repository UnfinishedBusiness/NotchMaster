#!/usr/bin/perl -w
use Tk;
use Tk::LabFrame;
use Storable;
use Math::Trig;
use Math::BigFloat;
Math::BigFloat->precision(-4);

my $mw = MainWindow->new;

$Profile_Length = 10;
$Profile_Side1 = "notch";
$Profile_Side2 = "disable";
$Side1_BranchDiamter = 1.750;
$Side1_HeaderDiamter = 1.750;
$Side1_BranchWallThickness = 0.120;
$Side1_BranchMateAngle = 90;
$Side2_BranchDiamter = 1.750;
$Side2_HeaderDiamter = 1.750;
$Side2_BranchWallThickness = 0.120;
$Side2_BranchMateAngle = 90;
$Parameters_Filename = "0.ngc";
$Parameters_Feedrate = 60;

$DataFile = "/tmp/.NotchMaster";


sub storeData
{
  if (open(my $fh, '>:encoding(UTF-8)', $DataFile))
  {
    print $fh "$Profile_Length\n";
    print $fh "$Profile_RelativeOrientation\n";
    print $fh "$Profile_Side1\n";
    print $fh "$Profile_Side2\n";
    print $fh "$Side1_BranchDiamter\n";
    print $fh "$Side1_HeaderDiamter\n";
    print $fh "$Side1_BranchWallThickness\n";
    print $fh "$Side1_BranchMateAngle\n";
    print $fh "$Side2_BranchDiamter\n";
    print $fh "$Side2_HeaderDiamter\n";
    print $fh "$Side2_BranchWallThickness\n";
    print $fh "$Side2_BranchMateAngle\n";
    print $fh "$Parameters_Filename\n";
    print $fh "$Parameters_Touchoff\n";
    print $fh "$Parameters_Feedrate\n";
    close($fh);
  }
  else
  {
    print "Can't store data!";
  }
}
sub fetchData
{
  if (open(my $fh, '<:encoding(UTF-8)', $DataFile))
  {
    $Profile_Length = <$fh>;
    $Profile_RelativeOrientation = <$fh>;
    $Profile_Side1 = <$fh>;
    $Profile_Side2 = <$fh>;
    $Side1_BranchDiamter = <$fh>;
    $Side1_HeaderDiamter = <$fh>;
    $Side1_BranchWallThickness = <$fh>;
    $Side1_BranchMateAngle = <$fh>;
    $Side2_BranchDiamter = <$fh>;
    $Side2_HeaderDiamter = <$fh>;
    $Side2_BranchWallThickness = <$fh>;
    $Side2_BranchMateAngle = <$fh>;
    $Parameters_Filename = <$fh>;
    $Parameters_Touchoff = <$fh>;
    $Parameters_Feedrate = <$fh>;
    close($fh);

    chomp $Profile_Length;
    chomp $Profile_RelativeOrientation;
    chomp $Profile_Side1;
    chomp $Profile_Side2;
    chomp $Side1_BranchDiamter;
    chomp $Side1_HeaderDiamter;
    chomp $Side1_BranchWallThickness;
    chomp $Side1_BranchMateAngle;
    chomp $Side2_BranchDiamter;
    chomp $Side2_HeaderDiamter;
    chomp $Side2_BranchWallThickness;
    chomp $Side2_BranchMateAngle;
    chomp $Parameters_Filename;
    chomp $Parameters_Touchoff;
    chomp $Parameters_Feedrate;
  }
  else
  {
    #print "Can't fetch data!";
  }
}
sub degree_sine {
    my $degrees = shift;
    my $radians = deg2rad($degrees);
    my $result = sin($radians);

    return $result;
}
sub degree_cosine {
    my $degrees = shift;
    my $radians = deg2rad($degrees);
    my $result = cos($radians);

    return $result;
}
sub degree_tangent {
    my $degrees = shift;
    my $radians = deg2rad($degrees);
    my $result = tan($radians);

    return $result;
}
sub Gcode_CalculateNotch
{
  $Branch_Diamter = shift;
  $Header_Diameter = shift;
  $Wall_Thickness = shift;
  $Angle = shift;

  my $GcodeBlock = "";
  my $Awords = "";
  my $Ywords = "";

  $RO = $Branch_Diamter / 2;
  $RU = $Header_Diameter / 2;
  $RI = $RO - $Wall_Thickness;
  $AF = $Angle;
  $ID = 0;
  $A_Axis_Angle = 2;
  for (my $i=0; $i < 180; $i++)
  {
    $Y = sqrt($RU **2 - (($RI * degree_sine($ID)) **2)) / degree_sine($AF) - degree_tangent(90 - $AF) * $RI * degree_cosine($ID);
    $ID=$ID + 2;
    $A_Axis_Angle = $A_Axis_Angle + 2;
  	#300=[#300+2]

    $Ysimple = Math::BigFloat->new($Y);
    #$GcodeBlock .= "G1 A$A_Axis_Angle Y$Ysimple F$Parameters_Feedrate\n";
    $Awords .= "$A_Axis_Angle\n";
    $Ywords .= "$Ysimple\n";
  }
  $smallestY = 100; #Big default, lower the value as we see smaller ones
  my @lines = split /\n/, $Ywords;
  foreach my $line (@lines)
  {
    chomp $line;
    if ($line < $smallestY)
    {
      $smallestY = $line;
    }
  }
  #print "Offset is $smallestY\n"; #Works!
  my @Yword_lines = split /\n/, $Ywords;
  #my @Aword_lines = split /\n/, $Awords; #Returns 2 degree increments to 360
  for( $i = 0; $i < @Yword_lines; $i++ )
  {
    $Yoffset = $Yword_lines[$i] - $smallestY;
   #print "Y$Yoffset\n";
   $GcodeBlock .= "$Yoffset\n";
  }
  return $GcodeBlock;
}

sub postGcode
{
  if ($Profile_Side1 eq "notch" && $Profile_Side2 eq "disable")
  {
    $Yoffsets = Gcode_CalculateNotch($Side1_BranchDiamter, $Side1_HeaderDiamter, $Side1_BranchWallThickness, $Side1_BranchMateAngle);
    $mw->messageBox(-title => 'Post', -message => 'Posting with Side 1 notch and Side 2 Disabled!', -type => 'ok', -default => 'ok');
    my @Gcode_lines = split /\n/, $Yoffsets;
    $A_word = 2;

    if (open(my $fh, '>:encoding(UTF-8)', $Parameters_Filename))
    {
      print $fh "G20\nG64 P0.001\n";
      print $fh "G0 A$A_word $Gcode_lines[0]\n\n";
      print $fh "$Parameters_Touchoff\n";
      for( $i = 1; $i < @Gcode_lines; $i++ )
      {
        $A_word += 2;
        chomp $Gcode_lines[$i];
        $Y = Math::BigFloat->new($Gcode_lines[$i]);
        print $fh "G1 A$A_word Y$Y F$Parameters_Feedrate\n";
      }
      print $fh "\nM5\nM30";
      close($fh);
    }
    else
    {
      $mw->messageBox(-title => 'Post', -message => 'Could not write file!', -type => 'ok', -default => 'ok');
    }
    return;
  }
  $mw->messageBox(-title => 'Post', -message => 'Not Implemented Yet', -type => 'ok', -default => 'ok');
  return;
}

fetchData();

$mw->title("NotchMaster");
#$mw->geometry ("900x600");
$profile_frame = $mw->LabFrame(-borderwidth => 2, -relief => 'groove', -label => 'Profile', -labelside => 'acrosstop');
$profile_frame->Label(-text => "Tube Length")->pack(-side => 'top');
$profile_frame->Entry(-textvariable=>\$Profile_Length)->pack();
$profile_frame->Label(-text => "Relative Orientation Angle")->pack(-side => 'top');
$profile_frame->Entry(-textvariable=>\$Profile_RelativeOrientation)->pack();
$side1_radio = $profile_frame->LabFrame(-borderwidth => 2, -relief => 'groove', -label => 'Side 1', -labelside => 'acrosstop');
foreach (qw/notch slice/) {
    $side1_radio->Radiobutton(-text => $_, -variable => \$Profile_Side1,
        -value => $_)->pack(-anchor => 'w');
}
$side1_radio->pack(-side => 'left');

$side2_radio = $profile_frame->LabFrame(-borderwidth => 2, -relief => 'groove', -label => 'Side 2', -labelside => 'acrosstop');
foreach (qw/notch slice disable/) {
    $side2_radio->Radiobutton(-text => $_, -variable => \$Profile_Side2,
        -value => $_)->pack(-anchor => 'w');
}
$side2_radio->pack(-side => 'right');

$profile_frame->pack(-side => 'top');

$side1_frame = $mw->LabFrame(-borderwidth => 2, -relief => 'groove', -label => 'Side 1', -labelside => 'acrosstop');
$side1_frame->Label(-text => "Branch Diameter")->pack(-side => 'top');
$side1_frame->Entry(-textvariable=>\$Side1_BranchDiamter)->pack();
$side1_frame->Label(-text => "Header Diameter")->pack(-side => 'top');
$side1_frame->Entry(-textvariable=>\$Side1_HeaderDiamter)->pack();
$side1_frame->Label(-text => "Branch Wall Thickness")->pack(-side => 'top');
$side1_frame->Entry(-textvariable=>\$Side1_BranchWallThickness)->pack();
$side1_frame->Label(-text => "Mate Angle")->pack(-side => 'top');
$side1_frame->Entry(-textvariable=>\$Side1_BranchMateAngle)->pack();
$side1_frame->pack(-side => 'left');

$side2_frame = $mw->LabFrame(-borderwidth => 2, -relief => 'groove', -label => 'Side 2', -labelside => 'acrosstop');
$side2_frame->Label(-text => "Branch Diameter")->pack(-side => 'top');
$side2_frame->Entry(-textvariable=>\$Side2_BranchDiamter)->pack();
$side2_frame->Label(-text => "Header Diameter")->pack(-side => 'top');
$side2_frame->Entry(-textvariable=>\$Side2_HeaderDiamter)->pack();
$side2_frame->Label(-text => "Branch Wall Thickness")->pack(-side => 'top');
$side2_frame->Entry(-textvariable=>\$Side2_BranchWallThickness)->pack();
$side2_frame->Label(-text => "Mate Angle")->pack(-side => 'top');
$side2_frame->Entry(-textvariable=>\$Side2_BranchMateAngle)->pack();
$side2_frame->pack(-side => 'right');

$Paramaters_frame = $mw->LabFrame(-borderwidth => 2, -relief => 'groove', -label => 'Parameters', -labelside => 'acrosstop');
$Paramaters_frame->Label(-text => "Filename")->pack(-side => 'top');
$Paramaters_frame->Entry(-textvariable=>\$Parameters_Filename)->pack();
$Paramaters_frame->Label(-text => "Touchoff Code")->pack(-side => 'top');
$Paramaters_frame->Entry(-textvariable=>\$Parameters_Touchoff)->pack();
$Paramaters_frame->Label(-text => "Feedrate")->pack(-side => 'top');
$Paramaters_frame->Entry(-textvariable=>\$Parameters_Feedrate)->pack();
$button_frame = $Paramaters_frame->Frame(-borderwidth => 2, -relief => 'groove');
$button_frame->Button(-text => 'Quit', -command => sub { storeData(); exit; })->pack(-side => 'left');
$button_frame->Button(-text => 'Post', -command => sub { storeData(); postGcode(); })->pack(-side => 'right');
$button_frame->pack;
$Paramaters_frame->pack(-side => 'bottom');

MainLoop;
